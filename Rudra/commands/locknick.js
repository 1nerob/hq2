const fs = require("fs-extra");
const path = require("path");

const lockNickDataPath = path.join(__dirname, "locknick.json");

// lockNickData рдХреЛynchronously рд▓реЛрдб рдХрд░реЗрдВ, рддрд╛рдХрд┐ рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рд╣реЛ рдХрд┐ рдлрд╛рдЗрд▓ рддреИрдпрд╛рд░ рд╣реИ
let lockNickData = {};
try {
  if (fs.existsSync(lockNickDataPath)) {
    lockNickData = JSON.parse(fs.readFileSync(lockNickDataPath, "utf8"));
  }
} catch (error) {
  console.error("locknick.json рдХреЛ рд▓реЛрдб рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐:", error);
  // рдпрджрд┐ JSON рджреВрд╖рд┐рдд рд╣реИ, рддреЛ рдЗрд╕реЗ рдЦрд╛рд▓реА рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЗ рд░реВрдк рдореЗрдВ рд╢реБрд░реВ рдХрд░реЗрдВ
  lockNickData = {};
}

function saveLockData() {
  try {
    fs.writeFileSync(lockNickDataPath, JSON.stringify(lockNickData, null, 2), "utf8");
  } catch (error) {
    console.error("locknick.json рдХреЛ рд╕реЗрд╡ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐:", error);
  }
}

module.exports = {
  config: {
    name: "locknick",
    version: "1.0.1", // version update kiya
    author: "Raj",
    countDown: 5,
    role: 1, // 1 = Admin, 0 = User (рдЖрдкрдХреЗ рдмреЙрдЯ рдлреНрд░реЗрдорд╡рд░реНрдХ рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ рдПрдбрдЬрд╕реНрдЯ рдХрд░реЗрдВ)
    shortDescription: "рдЧреНрд░реБрдк рдореЗрдВ рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд░реЗрдВ",
    longDescription: "рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдЙрдирдХреЗ рдирд┐рдХрдиреЗрдо рдмрджрд▓рдиреЗ рд╕реЗ рд░реЛрдХрддрд╛ рд╣реИред",
    category: "group",
    guide: "{p}locknick on/off"
  },

  onStart: async function ({ message, event, args, api }) {
    const threadID = event.threadID;
    const senderID = event.senderID;

    // рдмреЙрдЯ рдХреЗ рдкрд╛рд╕ Admin/Mod permissions рд╣реИрдВ рдпрд╛ рдирд╣реАрдВ, рдпрд╣ рдЬрд╛рдВрдЪреЗрдВ (рдЕрдЧрд░ рдЖрдкрдХрд╛ API рдЗрд╕рдХреА рдЕрдиреБрдорддрд┐ рджреЗрддрд╛ рд╣реИ)
    // рдпрд╣ рдлреНрд░реЗрдорд╡рд░реНрдХ-рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП:
    // const threadInfo = await api.getThreadInfo(threadID);
    // if (!threadInfo.adminIDs.some(admin => admin.id === api.getCurrentUserID())) {
    //   return message.reply("рдорд╛реЮ рдХреАрдЬрд┐рдпреЗ, рдореЗрд░реЗ рдкрд╛рд╕ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд░рдиреЗ рдХреА рдкрд░реНрдпрд╛рдкреНрдд рдЕрдиреБрдорддрд┐рдпрд╛рдБ рдирд╣реАрдВ рд╣реИрдВред рдореБрдЭреЗ рдЧреНрд░реБрдк рдПрдбрдорд┐рди рдмрдирд╛рдПрдВред");
    // }

    if (!args[0]) {
      return message.reply("тЪая╕П рдХреГрдкрдпрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `locknick on` рдпрд╛ `locknick off`");
    }

    const command = args[0].toLowerCase();

    if (command === "on") {
      if (lockNickData[threadID]) {
        return message.reply("ЁЯФТ рдпрд╣ рдЧреНрд░реБрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдореЛрдб рдореЗрдВ рд╣реИред");
      }

      try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (!threadInfo) {
            return message.reply("рдЧреНрд░реБрдк рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рдХрд░ рд╕рдХрд╛ред");
        }
        
        const nicknames = {};
        for (const user of threadInfo.userInfo) {
          // рдмреЙрдЯ рдХрд╛ рдЦреБрдж рдХрд╛ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рди рдХрд░реЗрдВ
          if (user.id !== api.getCurrentUserID()) {
            nicknames[user.id] = user.nickname || "";
          }
        }

        lockNickData[threadID] = nicknames;
        saveLockData();

        return message.reply("ЁЯФТ рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рдирд┐рдХрдиреЗрдо рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЙрдХ рдХрд░ рджрд┐рдП рдЧрдПред рдЕрдм рд╡реЗ рдЕрдкрдиреЗ рдирд┐рдХрдиреЗрдо рдирд╣реАрдВ рдмрджрд▓ рдкрд╛рдПрдВрдЧреЗред");

      } catch (error) {
        console.error("locknick on рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐:", error);
        return message.reply("рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд░рддреЗ рд╕рдордп рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд▓реЙрдЧ рдЬрд╛рдВрдЪреЗрдВред");
      }
    } else if (command === "off") {
      if (!lockNickData[threadID]) {
        return message.reply("тЪая╕П рдпрд╣ рдЧреНрд░реБрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдирд┐рдХрдиреЗрдо рдЕрдирд▓реЙрдХ рдореЛрдб рдореЗрдВ рд╣реИ!");
      }

      try {
        delete lockNickData[threadID];
        saveLockData();
        return message.reply("тЬЕ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ред рдЕрдм рд╕рджрд╕реНрдп рдЕрдкрдирд╛ рдирд┐рдХрдиреЗрдо рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред");
      } catch (error) {
        console.error("locknick off рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐:", error);
        return message.reply("рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рд╣рдЯрд╛рддреЗ рд╕рдордп рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рд▓реЙрдЧ рдЬрд╛рдВрдЪреЗрдВред");
      }
    } else {
      return message.reply("тЭМ рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдк! рдХреГрдкрдпрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `locknick on` рдпрд╛ `locknick off`");
    }
  },

  onEvent: async function ({ event, api }) {
    const { threadID, logMessageType, logMessageData, senderID } = event;

    // рдпрджрд┐ рдЗрд╕ рдЧреНрд░реБрдк рдХреЗ рд▓рд┐рдП рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдирд╣реАрдВ рд╣реИ рддреЛ рд╡рд╛рдкрд╕ рдЖ рдЬрд╛рдПрдВ
    if (!lockNickData[threadID]) return;

    // рдпрджрд┐ рдпрд╣ рдПрдХ рдирд┐рдХрдиреЗрдо рдмрджрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд▓реЙрдЧ рд╕рдВрджреЗрд╢ рд╣реИ
    if (logMessageType === "log:thread-nickname") {
      const changedUserID = logMessageData.participant_id;
      const newNickname = logMessageData.nickname;

      // рдпрджрд┐ рдмреЙрдЯ рдЦреБрдж рдирд┐рдХрдиреЗрдо рдмрджрд▓ рд░рд╣рд╛ рд╣реИ (рдЬреЛ рд╣рдорд╛рд░реЗ рдХреЛрдб рдореЗрдВ рд╣реА рд╣реЛ рд░рд╣рд╛ рд╣реИ), рддреЛ рдЙрд╕реЗ рдирдЬрд░рдЕрдВрджрд╛рдЬ рдХрд░реЗрдВ
      if (changedUserID === api.getCurrentUserID()) {
        return;
      }

      const lockedNick = lockNickData[threadID][changedUserID];

      // рдпрджрд┐ рдмрджрд▓рд╛ рдЧрдпрд╛ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд┐рдП рдЧрдП рдирд┐рдХрдиреЗрдо рд╕реЗ рднрд┐рдиреНрди рд╣реИ
      if (typeof lockedNick !== 'undefined' && newNickname !== lockedNick) {
        try {
          await api.changeNickname(lockedNick, threadID, changedUserID);
          api.sendMessage(
            `ЁЯФД "${newNickname || "blank"}" рдирд┐рдХрдиреЗрдо рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ред\nрдкреБрд░рд╛рдирд╛ рдирд┐рдХрдиреЗрдо рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛: "${lockedNick || "blank"}".`,
            threadID
          );
        } catch (error) {
          console.error(`рдирд┐рдХрдиреЗрдо рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐ thread ${threadID} рдореЗрдВ user ${changedUserID} рдХреЗ рд▓рд┐рдП:`, error);
          // рд╡реИрдХрд▓реНрдкрд┐рдХ рд░реВрдк рд╕реЗ, рдЖрдк рдпрд╣рд╛рдВ рдПрдХ рдкреНрд░рд╢рд╛рд╕рдХ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рддреНрд░реБрдЯрд┐ рд╣реБрдИ
          api.sendMessage(
            `тЭМ рдирд┐рдХрдиреЗрдо рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред (рдпреВрдЬрд░ ID: ${changedUserID})`,
            threadID
          );
        }
      }
    }
  }
};
