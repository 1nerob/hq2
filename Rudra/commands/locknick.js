const fs = require("fs-extra");
const path = require("path");

const NICKNAME_LOCK_FILE = path.join(__dirname, "locked_nicknames.json");

// рдлрдВрдХреНрд╢рди рдЬреЛ рдирд┐рдХрдиреЗрдо рдбреЗрдЯрд╛ рдХреЛ рд▓реЛрдб рдХрд░рддрд╛ рд╣реИ
function loadLockedNicknames() {
    try {
        if (fs.existsSync(NICKNAME_LOCK_FILE)) {
            return JSON.parse(fs.readFileSync(NICKNAME_LOCK_FILE, "utf8"));
        }
    } catch (error) {
        console.error("Error loading locked nicknames:", error);
    }
    return {}; // рдпрджрд┐ рдлрд╝рд╛рдЗрд▓ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИ рдпрд╛ рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реИ рддреЛ рдЦрд╛рд▓реА рдСрдмреНрдЬреЗрдХреНрдЯ рд▓реМрдЯрд╛рдПрдВ
}

// рдлрдВрдХреНрд╢рди рдЬреЛ рдирд┐рдХрдиреЗрдо рдбреЗрдЯрд╛ рдХреЛ рд╕реЗрд╡ рдХрд░рддрд╛ рд╣реИ
function saveLockedNicknames(data) {
    try {
        fs.writeFileSync(NICKNAME_LOCK_FILE, JSON.stringify(data, null, 2), "utf8");
    } catch (error) {
        console.error("Error saving locked nicknames:", error);
    }
}

let lockedNicknames = loadLockedNicknames(); // рдмреЙрдЯ рд╕реНрдЯрд╛рд░реНрдЯ рд╣реЛрдиреЗ рдкрд░ рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░реЗрдВ

module.exports = {
  config: {
    name: "locknick",
    version: "2.0.0", // New version
    author: "Your Name", // рдЖрдк рдЕрдкрдирд╛ рдирд╛рдо рдпрд╣рд╛рдБ рдбрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВ
    countDown: 5,
    role: 1, // 1 = Admin, 0 = User. рдЕрдЧрд░ рдЖрдк рдЯреЗрд╕реНрдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдЗрд╕реЗ рдЕрд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ 0 рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
    shortDescription: "рдЧреНрд░реБрдк рдореЗрдВ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ/рдЕрдирд▓реЙрдХ рдХрд░реЗрдВ",
    longDescription: "рдЧреНрд░реБрдк рдХреЗ рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдЙрдирдХреЗ рдирд┐рдХрдиреЗрдо рдмрджрд▓рдиреЗ рд╕реЗ рд░реЛрдХрддрд╛ рд╣реИред",
    category: "group",
    guide: "{p}locknick [on/off]"
  },

  // рдпрд╣ рдлрд╝рдВрдХреНрд╢рди рддрдм рдЪрд▓рддрд╛ рд╣реИ рдЬрдм рдХрдорд╛рдВрдб рдЪрд▓рд╛рдИ рдЬрд╛рддреА рд╣реИ
  onStart: async function ({ message, event, args, api }) {
    const threadID = event.threadID;
    const command = args[0] ? args[0].toLowerCase() : "";

    // рдЕрдЧрд░ рдХреЛрдИ рдЖрд░реНрдЧреБрдореЗрдВрдЯ рдирд╣реАрдВ рджрд┐рдпрд╛ рдЧрдпрд╛
    if (command === "") {
      return message.reply("тЪая╕П рдХреГрдкрдпрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `{p}locknick on` рдпрд╛ `{p}locknick off`");
    }

    // "on" рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП
    if (command === "on") {
      if (lockedNicknames[threadID]) {
        return message.reply("ЁЯФТ рдпрд╣ рдЧреНрд░реБрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдореЛрдб рдореЗрдВ рд╣реИред");
      }

      try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (!threadInfo || !threadInfo.userInfo) {
            return message.reply("рдЧреНрд░реБрдк рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдорд░реНрдеред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреЙрдЯ рдЧреНрд░реБрдк рдореЗрдВ рд╣реИ рдФрд░ рдЙрд╕рдХреЗ рдкрд╛рд╕ рдЕрдиреБрдорддрд┐рдпрд╛рдБ рд╣реИрдВред");
        }

        const currentNicks = {};
        for (const user of threadInfo.userInfo) {
          // рдмреЙрдЯ рдХрд╛ рдЦреБрдж рдХрд╛ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рди рдХрд░реЗрдВ рдФрд░ рдЕрдиреНрдп рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рдирд┐рдХрдиреЗрдо рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ
          if (user.id !== api.getCurrentUserID()) {
            currentNicks[user.id] = user.nickname || ""; // рдЕрдЧрд░ рдХреЛрдИ рдирд┐рдХрдиреЗрдо рдирд╣реАрдВ рд╣реИ рддреЛ рдЦрд╛рд▓реА рд╕реНрдЯреНрд░рд┐рдВрдЧ
          }
        }

        lockedNicknames[threadID] = currentNicks;
        saveLockedNicknames(lockedNicknames); // рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░реЗрдВ

        return message.reply("ЁЯФТ рдЗрд╕ рдЧреНрд░реБрдк рдХреЗ рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рдирд┐рдХрдиреЗрдо рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЙрдХ рдХрд░ рджрд┐рдП рдЧрдП рд╣реИрдВред");

      } catch (error) {
        console.error("locknick 'on' рдХрдорд╛рдВрдб рдореЗрдВ рддреНрд░реБрдЯрд┐:", error);
        return message.reply("рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд░рддреЗ рд╕рдордп рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рд▓реЙрдЧ рдЬрд╛рдВрдЪреЗрдВред");
      }
    }
    // "off" рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП
    else if (command === "off") {
      if (!lockedNicknames[threadID]) {
        return message.reply("тЪая╕П рдпрд╣ рдЧреНрд░реБрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдирд┐рдХрдиреЗрдо рдЕрдирд▓реЙрдХ рдореЛрдб рдореЗрдВ рд╣реИ!");
      }

      try {
        delete lockedNicknames[threadID]; // рдЧреНрд░реБрдк рдХрд╛ рдбреЗрдЯрд╛ рд╣рдЯрд╛рдПрдВ
        saveLockedNicknames(lockedNicknames); // рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░реЗрдВ

        return message.reply("тЬЕ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ред рдЕрдм рд╕рджрд╕реНрдп рдЕрдкрдирд╛ рдирд┐рдХрдиреЗрдо рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред");
      } catch (error) {
        console.error("locknick 'off' рдХрдорд╛рдВрдб рдореЗрдВ рддреНрд░реБрдЯрд┐:", error);
        return message.reply("рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рд╣рдЯрд╛рддреЗ рд╕рдордп рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рд▓реЙрдЧ рдЬрд╛рдВрдЪреЗрдВред");
      }
    }
    // рдЕрдорд╛рдиреНрдп рдХрдорд╛рдВрдб
    else {
      return message.reply("тЭМ рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдк! рдХреГрдкрдпрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `{p}locknick on` рдпрд╛ `{p}locknick off`");
    }
  },

  // рдпрд╣ рдлрд╝рдВрдХреНрд╢рди рддрдм рдЪрд▓рддрд╛ рд╣реИ рдЬрдм рдХреЛрдИ рдЗрд╡реЗрдВрдЯ рд╣реЛрддрд╛ рд╣реИ (рдЬреИрд╕реЗ рдХреЛрдИ рдирд┐рдХрдиреЗрдо рдмрджрд▓рддрд╛ рд╣реИ)
  onEvent: async function ({ event, api }) {
    const { threadID, logMessageType, logMessageData, senderID } = event;

    // рдпрджрд┐ рдЗрд╕ рдЧреНрд░реБрдк рдХреЗ рд▓рд┐рдП рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдирд╣реАрдВ рд╣реИ рддреЛ рдХреБрдЫ рди рдХрд░реЗрдВ
    if (!lockedNicknames[threadID]) return;

    // рдпрджрд┐ рдпрд╣ рдПрдХ рдирд┐рдХрдиреЗрдо рдмрджрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд▓реЙрдЧ рд╕рдВрджреЗрд╢ рд╣реИ
    if (logMessageType === "log:thread-nickname") {
      const changedUserID = logMessageData.participant_id;
      const newNickname = logMessageData.nickname; // рд╡рд╣ рдирд┐рдХрдиреЗрдо рдЬреЛ рдпреВрдЬрд░ рдиреЗ рд╕реЗрдЯ рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХреА

      // рдпрджрд┐ рдмреЙрдЯ рдЦреБрдж рдирд┐рдХрдиреЗрдо рдмрджрд▓ рд░рд╣рд╛ рд╣реИ рддреЛ рдЙрд╕реЗ рдЕрдирджреЗрдЦрд╛ рдХрд░реЗрдВ рддрд╛рдХрд┐ рд▓реВрдк рди рд╣реЛ
      if (changedUserID === api.getCurrentUserID()) {
        return;
      }

      const originalLockedNick = lockedNicknames[threadID][changedUserID];

      // рдпрджрд┐ рдпреВрдЬрд░ рдиреЗ рдирд┐рдХрдиреЗрдо рдмрджрд▓рд╛ рдФрд░ рдпрд╣ рд╕реЗрд╡ рдХрд┐рдП рдЧрдП рдирд┐рдХрдиреЗрдо рд╕реЗ рдЕрд▓рдЧ рд╣реИ
      if (typeof originalLockedNick !== 'undefined' && newNickname !== originalLockedNick) {
        try {
          // рдирд┐рдХрдиреЗрдо рдХреЛ рд╡рд╛рдкрд╕ рдореВрд▓ рдкрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
          await api.changeNickname(originalLockedNick, threadID, changedUserID);

          // рдпреВрдЬрд░ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдирд┐рдХрдиреЗрдо рд╡рд╛рдкрд╕ рдмрджрд▓ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ
          api.sendMessage(
            `ЁЯФД "${newNickname || "blank"}" рдирд┐рдХрдиреЗрдо рдХрд╛ рдкрддрд╛ рдЪрд▓рд╛ред\nрдкреБрд░рд╛рдирд╛ рдирд┐рдХрдиреЗрдо рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛: "${originalLockedNick || "blank"}".`,
            threadID
          );
        } catch (error) {
          console.error(`Error resetting nickname for user ${changedUserID} in thread ${threadID}:`, error);
          // рдпрджрд┐ рдирд┐рдХрдиреЗрдо рд░реАрд╕реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реЛ рддреЛ рдПрдбрдорд┐рди рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
          // api.sendMessage(`тЭМ рдирд┐рдХрдиреЗрдо рд░реАрд╕реЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдЬрд╛рдВрдЪреЗрдВред`, threadID);
        }
      }
    }
  }
};
