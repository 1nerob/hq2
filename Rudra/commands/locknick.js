const fs = require("fs-extra");
const path = require("path");

const OWNER_UID = "61550558518720"; // ‡§Ü‡§™‡§ï‡•Ä UID

const NICKNAME_LOCK_FILE = path.join(__dirname, "../data/locked_nicknames.json");

// ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
function loadLockedNicknames() {
    try {
        if (fs.existsSync(NICKNAME_LOCK_FILE)) {
            return JSON.parse(fs.readFileSync(NICKNAME_LOCK_FILE, "utf8"));
        }
    } catch (error) {
        console.error("Error loading locked nicknames:", error);
    }
    return {};
}

// ‡§°‡•á‡§ü‡§æ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
function saveLockedNicknames(data) {
    try {
        fs.ensureFileSync(NICKNAME_LOCK_FILE);
        fs.writeFileSync(NICKNAME_LOCK_FILE, JSON.stringify(data, null, 2), "utf8");
    } catch (error) {
        console.error("Error saving locked nicknames:", error);
    }
}

// **‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§¶‡§≤‡§æ‡§µ: lockedNicknames ‡§ï‡•ã ‡§Ö‡§¨ ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•Ä‡§ß‡•á ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ**
// ‡§¨‡§≤‡•ç‡§ï‡§ø, run ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§á‡§∏‡•á ‡§≤‡•ã‡§°/‡§∏‡•á‡§µ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

module.exports = {
  config: {
    name: "locknick",
    version: "2.2.0", // Version update
    author: "Your Name",
    countDown: 5,
    role: 1, // ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è 0 ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    shortDescription: "‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï/‡§Ö‡§®‡§≤‡•â‡§ï ‡§ï‡§∞‡•á‡§Ç",
    longDescription: "‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§â‡§®‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤‡§®‡•á ‡§∏‡•á ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à‡•§",
    category: "group",
    guide: "{p}locknick [on/off]"
  },

  run: async function ({ message, event, args, api }) {
    const threadID = event.threadID;
    const senderID = event.senderID;
    const command = args[0] ? args[0].toLowerCase() : "";

    // **‡§Ø‡§π‡§æ‡§Å, ‡§π‡§Æ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á**
    let lockedNicknames = loadLockedNicknames(); // <--- ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç

    if (senderID !== OWNER_UID) {
      return api.sendMessage("‚õî Sirf malik use kar sakta hai!", threadID);
    }

    if (command === "") {
      return api.sendMessage("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç: `{p}locknick on` ‡§Ø‡§æ `{p}locknick off`", threadID);
    }

    if (command === "on") {
      if (lockedNicknames[threadID]) {
        return api.sendMessage("üîí ‡§Ø‡§π ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§", threadID);
      }

      try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (!threadInfo || !threadInfo.userInfo) {
            return api.sendMessage("‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡•§ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•à ‡§î‡§∞ ‡§â‡§∏‡§ï‡•á ‡§™‡§æ‡§∏ ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø‡§Ø‡§æ‡§Å ‡§π‡•à‡§Ç‡•§", threadID);
        }

        const currentNicks = {};
        for (const user of threadInfo.userInfo) {
          if (user.id !== api.getCurrentUserID()) {
            currentNicks[user.id] = user.nickname || "";
          }
        }

        lockedNicknames[threadID] = currentNicks;
        saveLockedNicknames(lockedNicknames); // <--- ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç

        return api.sendMessage("üîí ‡§á‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§∏‡§¶‡§∏‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡•â‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç‡•§", threadID);

      } catch (error) {
        console.error("locknick 'on' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error);
        return api.sendMessage("‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§", threadID);
      }
    }
    else if (command === "off") {
      if (!lockedNicknames[threadID]) {
        return api.sendMessage("‚ö†Ô∏è ‡§Ø‡§π ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§Ö‡§®‡§≤‡•â‡§ï ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§π‡•à!", threadID);
      }

      try {
        delete lockedNicknames[threadID];
        saveLockedNicknames(lockedNicknames); // <--- ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç

        return api.sendMessage("‚úÖ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§ ‡§Ö‡§¨ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§Ö‡§™‡§®‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§", threadID);
      } catch (error) {
        console.error("locknick 'off' ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error);
        return api.sendMessage("‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•ã‡§à ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡•â‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§", threadID);
      }
    }
    else {
      return api.sendMessage("‚ùå ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç: `{p}locknick on` ‡§Ø‡§æ `{p}locknick off`", threadID);
    }
  },

  // **‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§¶‡§≤‡§æ‡§µ: lockedNicknamesData ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à**
  // ‡§Ö‡§¨ ‡§á‡§µ‡•á‡§Ç‡§ü ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•Ä‡§ß‡•á JSON ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§ó‡•Ä‡•§
};
